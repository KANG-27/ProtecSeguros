---
interface Props {
  data: Description[] | string[];
  type: string;
}
interface Description {
  nombre: string;
  referencia: string;
  descripcion: string;
  imagen: string;
}
const { data, type } = Astro.props;
---

<div
  class="carousel"
  data-content={`{"tipo": "${type}", "tamaño": "${data?.length}"}`}
>
  <div class="carousel-inner">
    {
      type === "servicios" &&
        data.map((element: any) => (
          <div class="card-services">
            <img
              loading="lazy"
              class="imagen-card-services"
              src={element.imagen}
              alt="imagen"
            />
            <div class="content-card-services">
              <div>
                <h3 class="protec-card">Protec</h3>
                <h3>{element.nombre}</h3>
                <p class="description-card-services">{element.descripcion}</p>
              </div>
              <a
                href={`/servicio/${element.referencia
                  .trim()
                  .normalize("NFD")
                  .replace(/[\u0300-\u036f]/g, "")
                  .replace(/\s+/g, "-")}`}
              >
                <div class="content-contact">
                  <button class="button-contact-more">Conoce más</button>
                </div>
              </a>
            </div>
          </div>
        ))
    }
    {
      type == "aliados" &&
        (data as string[]).map((image) => (
          <div class="carousel-item">
            <img src={image} loading="lazy" alt="Carousel image" />
          </div>
        ))
    }
  </div>
  <div class="carousel-controls">
    <span class="arrow material-symbols-outlined prev"> arrow_back </span>
    <span class="arrow material-symbols-outlined next"> arrow_forward </span>
  </div>
</div>

<script is:inline type="text/javascript">
  document.addEventListener("astro:page-load", function () {
    const carousels = document.querySelectorAll(".carousel");

    carousels.forEach((carousel) => {
      const carouselData = JSON.parse(carousel.getAttribute("data-content"));
      let currentIndex = 0;
      let isDragging = false;
      let startX = 0;
      let currentTranslate = 0;
      let prevTranslate = 0;
      let animationID;

      function getVisibleItems() {
        const carouselWidth = carousel.offsetWidth;
        const itemWidth =
          carouselData.tipo === "servicios"
            ? window.screen.width <= 375
              ? 322
              : window.screen.width <= 450
                ? 375
                : 520
            : 375;
        return Math.floor(carouselWidth / itemWidth);
      }

      function showSlide(index) {
        const slides = carousel.querySelector(".carousel-inner");
        const totalSlides = carouselData.tamaño;
        const visibleItems = getVisibleItems();

        if (index < 0) {
          currentIndex = totalSlides - visibleItems;
        } else if (index >= totalSlides) {
          currentIndex = 0;
        } else {
          currentIndex = index;
        }

        const offset =
          -currentIndex *
          ((carouselData.tipo === "servicios"
            ? window.screen.width <= 375
              ? 322
              : window.screen.width <= 450
                ? 375
                : 520
            : 375) +
            50);

        slides.style.transform = `translateX(${offset}px)`;
        prevTranslate = offset;
      }

      function nextSlide() {
        showSlide(currentIndex + 1);
      }

      function prevSlide() {
        showSlide(currentIndex - 1);
      }

      showSlide(0);

      const nextButton = carousel.querySelector(".next");
      const prevButton = carousel.querySelector(".prev");

      nextButton.addEventListener("click", nextSlide);
      prevButton.addEventListener("click", prevSlide);

      window.addEventListener("resize", () => showSlide(currentIndex));

      // Agregar funcionalidad de arrastre y swipe
      const slides = carousel.querySelector(".carousel-inner");

      slides.addEventListener("mousedown", dragStart);
      slides.addEventListener("mouseup", dragEnd);
      slides.addEventListener("mouseleave", dragEnd);
      slides.addEventListener("mousemove", dragMove);

      slides.addEventListener("touchstart", dragStart);
      slides.addEventListener("touchend", dragEnd);
      slides.addEventListener("touchmove", dragMove);

      function dragStart(event) {
        isDragging = true;
        startX = getPositionX(event);
        animationID = requestAnimationFrame(animation);
      }

      function dragEnd() {
        cancelAnimationFrame(animationID);
        isDragging = false;

        const movedBy = currentTranslate - prevTranslate;

        if (movedBy < -50) nextSlide();
        if (movedBy > 50) prevSlide();

        currentTranslate = prevTranslate; // Resetear posición
      }

      function dragMove(event) {
        if (isDragging) {
          const currentPosition = getPositionX(event);
          currentTranslate = prevTranslate + currentPosition - startX;
        }
      }

      function getPositionX(event) {
        return event.type.includes("mouse")
          ? event.pageX
          : event.touches[0].clientX;
      }

      function animation() {
        slides.style.transform = `translateX(${currentTranslate}px)`;
        if (isDragging) requestAnimationFrame(animation);
      }
    });
  });
</script>

<style>
  .arrow {
    font-size: 50px;
    cursor: pointer;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    background-color: white;
    border-radius: 100%;
    color: #1f54bc;
  }
  .protec-card {
    color: #1f54bc;
  }
  .description-card-services {
    width: 100%; /* Ancho fijo */
    display: -webkit-box;
    -webkit-line-clamp: 3; /* Límite de líneas */
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  .content-card-services a {
    text-decoration: none;
  }
  .content-card-services h3 {
    margin: 0%;
  }
  .content-card-services {
    margin: 2% 5%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }
  .content-contact {
    margin-top: 5%;
    display: flex;
    justify-content: center;
  }
  .button-contact-more {
    font-size: larger;
    color: white;
    border: 0;
    background-color: #1f54bc;
    width: 90%;
    height: 50px;
    border-radius: 30px;
    margin: 2%;
    cursor: pointer;
  }
  .card-services {
    box-sizing: border-box;
    margin: 5px;
    box-shadow: 3px 3px 3px 3px grey;
    width: 520px;
    height: max-content;
    display: flex;
    justify-content: space-between;
    flex-direction: column;
    /* justify-content: center; */
    border-radius: 5%;
  }
  .carousel {
    display: flex;
    overflow: hidden;
    width: 100%;
    position: relative;
  }

  .carousel-inner {
    display: flex;
    gap: 50px;
    margin: 0% 2%;
    align-items: center;
    transition: transform 0.5s ease;
  }

  .carousel-item {
    box-sizing: border-box;
    /* border-radius: 10%; */
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: white;
    height: 100%;
  }

  .carousel .card-services img {
    border-radius: 20px 20px 0px 0px;
    width: 100% !important;
    height: 280px;
  }
  .carousel img {
    width: 60%;
    height: auto;
  }

  .carousel-controls {
    position: absolute;
    top: 50%;
    width: 100%;
    display: flex;
    justify-content: space-between;
    transform: translateY(-50%);
  }

  .control {
    background: rgba(255, 255, 255, 0.7);
    border: none;
    padding: 10px;
    cursor: pointer;
  }

  @media (max-width: 450px) {
    .card-services {
      width: 370px !important; /* Mostrar 1 imagen en pantallas pequeñas */
      height: max-content;
      margin-left: 17px;
    }
    .carousel-inner {
      gap: 34px;
    }
  }
  @media (max-width: 375px) {
    .card-services {
      width: 330px; /* Mostrar 1 imagen en pantallas pequeñas */
      margin-left: 17px;
      height: max-content;
    }
    .carousel-inner {
      gap: 20px;
    }
  }

  @media (max-width: 768px) {
    .carousel-item {
      min-width: 90%; /* Mostrar 1 imagen en pantallas pequeñas */
    }
    .arrow {
      font-size: 35px;
    }
  }

  @media (min-width: 768px) and (max-width: 1024px) {
    .carousel-item {
      min-width: calc(90% / 2); /* Mostrar 2 imágenes en pantallas medianas */
    }
  }

  @media (min-width: 1024px) {
    .carousel-item {
      min-width: calc(90% / 3); /* Mostrar 3 imágenes en pantallas grandes */
    }
  }
</style>
